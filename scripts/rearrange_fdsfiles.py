import argparse

def rearrange_fdsfiles(tempromfile, symfile, romfile):
    with open(tempromfile, "rb") as f:
        tempromdata = f.read()
    
    with open(symfile, "r") as f:
        lines = f.readlines()
    
    sym_section = ""
    sym_temprom_sections = []
    for line in lines:
        if line.find(";") != -1:
            line = line[:line.find(";")]
        line = line.strip()
        if line == "":
            continue
        
        if line[0] == "[":
            # new section
            sym_section = line
        elif sym_section == "[information]":
            if line.startswith("version"):
                if line != "version 3":
                    raise Exception("bad sym file version. expected version 3, but got " + line)
        elif sym_section == "[sections]":
            line = line.split()
            sym_temprom_sections.append({
                "offset": int(line[0], 16),
                "size": int(line[3], 16),
                "name": line[4]
            })
    
    sym_temprom_sections.sort(key=lambda s: s["offset"])
    sym_temprom_sections_per_side = []
    for s in sym_temprom_sections:
        if s["name"].find("DiskInfo") != -1:
            sym_temprom_sections_per_side.append([s])
        else:
            sym_temprom_sections_per_side[len(sym_temprom_sections_per_side)-1].append(s)
    
    romdata = bytearray()
    for side in sym_temprom_sections_per_side:
        romdata_of_side = bytearray()
        for s in side:
            romdata_of_side += tempromdata[s["offset"]:s["offset"]+s["size"]]
        if len(romdata_of_side) > 65500:
            raise Exception("disk side containing section " + side[0]["name"] + " is too big (" + int(len(romdata_of_side)) + "/65500 bytes)")
        romdata += romdata_of_side
        romdata += bytes(65500-len(romdata_of_side))
    
    with open(romfile, "wb") as f:
        f.write(bytes(romdata))


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('-t', '--tempromfile', required=True, help='Input temp FDS file generated by WLA-DX')
    ap.add_argument('-s', '--symfile', required=True, help='Input SYM file')
    ap.add_argument('-r', '--romfile', required=True, help='Output FDS file')
    args = ap.parse_args()

    transpose_song(args.tempromfile, args.symfile, args.romfile)


if __name__ == "__main__":
    main()

